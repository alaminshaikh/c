#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Stack structure
struct Stack {
    int arr[MAX];
    int top;
};

// Initialize stack
void initStack(struct Stack* stack) {
    stack->top = -1;
}

// Push element onto stack
void push(struct Stack* stack, int value) {
    if (stack->top < MAX - 1) {
        stack->arr[++stack->top] = value;
    } else {
        printf("Stack overflow\n");
    }
}

// Pop element from stack
int pop(struct Stack* stack) {
    if (stack->top == -1) {
        return -1; // Empty stack
    }
    return stack->arr[stack->top--];
}

// Check if stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Queue structure using two stacks
struct Queue {
    struct Stack stack1;
    struct Stack stack2;
};

// Initialize the queue
void initQueue(struct Queue* q) {
    initStack(&q->stack1);
    initStack(&q->stack2);
}

// Enqueue operation (add to queue)
void enqueue(struct Queue* q, int value) {
    push(&q->stack1, value);
}

// Dequeue operation (remove from queue)
int dequeue(struct Queue* q) {
    // If both stacks are empty, queue is empty
    if (isEmpty(&q->stack1) && isEmpty(&q->stack2)) {
        printf("Queue is empty\n");
        return -1;
    }

    // If stack2 is empty, move elements from stack1 to stack2
    if (isEmpty(&q->stack2)) {
        while (!isEmpty(&q->stack1)) {
            push(&q->stack2, pop(&q->stack1));
        }
    }

    // Pop from stack2 for dequeuing
    return pop(&q->stack2);
}

int main() {
    struct Queue q;
    initQueue(&q);

    // Enqueue some elements
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);

    // Dequeue and print elements
    printf("Dequeued: %d\n", dequeue(&q)); // 10
    printf("Dequeued: %d\n", dequeue(&q)); // 20

    // Enqueue more elements
    enqueue(&q, 40);
    enqueue(&q, 50);

    // Dequeue and print elements
    printf("Dequeued: %d\n", dequeue(&q)); // 30
    printf("Dequeued: %d\n", dequeue(&q)); // 40
    printf("Dequeued: %d\n", dequeue(&q)); // 50

    return 0;
}
